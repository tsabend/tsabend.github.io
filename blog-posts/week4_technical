- `Enumerable#map` #DBCEM


## Release 2: Blog
Write a blog post that teaches others what you learned about the way these things work and how to use them. Be sure to include code samples in your blog to show others what you are talking about. 

If you want to go more in-depth with any of these research memory use and link it to your strategy for deciding which to use. 

Write this blog for an audience of newb programmers.


map { |item| block } → new_ary
map → Enumerator
Invokes the given block once for each element of self.

Creates a new array containing the values returned by the block.

See also Enumerable#collect.

If no block is given, an Enumerator is returned instead.

		<h3>#map, #awesome</h3>
		<p>This week at DBC we've been diving back into the world of ruby. One of the features that I like about ruby is it's variety of built in enumerable methods. These functions like inject, select, map are really useful when trying to manipulate and use arrays and hashes but can be called on any class that has an #each method. In general there isn't anything that these functions do that you couldn't do with an each iterator or even a "for loop" and some extra code, but having the functionality built into these methods makes it much easier to put things together quickly and simply.</p>
		<p>The #map method is one of the most useful enumerators. Map works by taking a block of code and running that block on each object in your collection. It then outputs a new collection.</p>
		<p> For example, if you had an array of numbers you could perform math on each of the elements of that array with map.</p>

		array = [0, 2, 2, 6]
		array.map {|x| x + 1} #=> [1, 3, 3, 7]

		<p>This isn't limited to numbers. Let's say you had an array of your favorite Fresh Prince Characters. Suddenly you realized you forgot their last name! Map to the rescue:</p>

		best_characters = ["Phillip", "Vivian", "Hilary" "Carlton", "Ashley"]
		best_characters.map {|x| x + " Banks"} = ["Phillip Banks", "Vivian Banks", "Hilary Banks" "Carlton Banks", "Ashley Banks"]

		<p>#map also has a destructive version fo the method, so calling best_characters.map! would not only return the corrected array, it would modify the best_characters to include the corrected names.</p>
		<p>Also interesting is that map has another name: collect. Collect is another enumerable that does literally the exact same thing as map. The method so cool, it was called twice.</p>
		<p>Now so far we've just seen what map does, but when would you actually want to use this? Well, any time you want to change a lot of data at the same time map is useful. Maybe you have a list of names that you got from some form and some people forgot to capitalize their first names? Using #map and #capitalize could easily fix this. If you had an array of numbers but wanted them as strings #map and #to_i could quickly give you the desired result.


		<h3>Sources<h3>
		<ul>
		<li><a href="http://en.wikipedia.org/wiki/List_of_The_Fresh_Prince_of_Bel-Air_characters"></a></li>
		</ul>

